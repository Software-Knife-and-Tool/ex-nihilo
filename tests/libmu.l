((:lambda ()))
((identity fixnum+) 1 2)
(:defsym list1 (:lambda (:rest lists) lists))
(:quote f)
(apply fixnum+ '(1 2))
(boundp 'foo)
(boundp :nil)
(car '(1 2 3))
(car :nil)
(cdr '(1 2 3))
(cdr :nil)
(charp #\a)
(charp 1)
(cons 1 '(2))
(cons 1 2)
(consp '(1))
(consp 1)
(cos 60.0)
(eq #\p #\p)
(eq apply mu:apply)
(eq :t :nil)
(eq :t :t)
(eval 1)
(fixnum* -2 3)
(fixnum* 2 3)
(fixnum+ -1 2)
(fixnum+ 1 2)
(fixnum- 1 2)
(fixnum- 2 1)
(fixnum< 2 3)
(fixnum< 3 2)
(fixnump 1)
(fixnump :t)
(float* -0.1 0.2)
(float* 0.1 0.2)
(float+ -3.0 2.0)
(float+ 0.1 0.2)
(float- 0.1 0.2)
(float- 3.0 1.0)
(float/ 0.1 0.2)
(float/ 2.0 3.0)
(float< 2.0 3.0)
(float< 3.0 2.0)
(floatp 1.0)
(floatp :t)
(floor 2 3)
(floor 3 2)
(functionp apply)
(functionp mu::block)
(functionp mu::clock-view)
(functionp mu::frame-ref)
(functionp mu::letq)
(functionp mu::list-to-vector)
(functionp mu::return)
(functionp :t)
(functionp accept-socket-stream)
(functionp acons)
(functionp apply)
(functionp asin)
(functionp atan)
(functionp boundp)
(functionp car)
(functionp cdr)
(functionp charp)
(functionp close)
(functionp closure)
(functionp connect-socket-stream)
(functionp cons)
(functionp consp)
(functionp cos)
(functionp env-view)
(functionp eofp)
(functionp eq)
(functionp eval)
(functionp condition)
(functionp conditionp)
(functionp exit)
(functionp exp)
(functionp find-ns)
(functionp find-in-ns)
(functionp find-symbol)
(functionp fixnum*)
(functionp fixnum+)
(functionp fixnum+)
(functionp fixnum-)
(functionp fixnum<)
(functionp fixnump)
(functionp float*)
(functionp float+)
(functionp float-)
(functionp float/)
(functionp float<)
(functionp floatp)
(functionp floor)
(functionp functionp)
(functionp gc)
(functionp get-output-stream-string)
(functionp heap-view)
(functionp identity)
(functionp in-ns)
(functionp intern)
(functionp invoke)
(functionp keyword)
(functionp keywordp)
(functionp length)
(functionp load)
(functionp log)
(functionp log10)
(functionp logand)
(functionp logor)
(functionp macro-function)
(functionp macroexpand)
(functionp make-symbol)
(functionp mapc)
(functionp mapcar)
(functionp mapl)
(functionp maplist)
(functionp mu::apply)
(functionp namespacep)
(functionp ns)
(functionp ns-import)
(functionp ns-name)
(functionp ns-symbols)
(functionp nth)
(functionp nthcdr)
(functionp null)
(functionp open-input-file)
(functionp open-input-string)
(functionp open-output-file)
(functionp open-output-string)
(functionp open-socket-server)
(functionp open-socket-stream)
(functionp open-stream)
(functionp pow)
(functionp print)
(functionp raise)
(functionp raise-condition)
(functionp read)
(functionp read-byte)
(functionp read-char)
(functionp set-macro-character)
(functionp sin)
(functionp special-operatorp)
(functionp sqrt)
(functionp streamp)
(functionp struct)
(functionp struct-slots)
(functionp struct-type)
(functionp structp)
(functionp symbol-name)
(functionp symbol-ns)
(functionp symbol-value)
(functionp symbolp)
(functionp system)
(functionp tan)
(functionp terpri)
(functionp trampoline)
(functionp type-of)
(functionp unread-char)
(functionp vector-length)
(functionp vector-map)
(functionp vector-mapc)
(functionp vector-ref)
(functionp vector-type)
(functionp vectorp)
(functionp view)
(functionp with-condition)
(functionp write-byte)
(functionp write-char)
(get-output-stream-string (open-output-string ""))
(keywordp 'foo)
(keywordp :keyp)
(length '(1 2 3))
(length :nil)
(log 10.0)
(log10 1000.0)
(logand 3 1)
(logor 4 2)
(macroexpand 123)
(make-symbol "abc")
(namespacep :t)
(nth 0 '(1 2 3))
(nthcdr 0 '(1 2 3))
(null :nil)
(null :t)
(pow 7.0 3.0)
(print 1.0 :nil :t)
(print 123 :nil :nil)
(print 123 :nil :t)
(read (open-input-string "'f"))
(sin 30.0)
(special-operatorp 'foo)
(special-operatorp :defsym)
(sqrt 2.0)
(streamp error-output)
(streamp standard-input)
(streamp standard-output)
(symbol-name 'foo)
(symbol-value :nil)
(symbolp :t)
(tan 45.0)
(trampoline (:lambda () 0))
(truncate 2 3)
(truncate 3 2)
(type-of "foo")
(type-of load)
(vector-length "abc")
(vector-length #(:t 1 2 3))
(vector-map (:lambda (n) (fixnum+ 1 n)) #(:fixnum 1 2 3))
(vector-mapc (:lambda (n) (print n :nil :nil) (terpri :nil)) #(:fixnum 1 2 3))
(vector-ref #(:fixnum 1 2 3) 1)
(vector-ref #(:float 1.0 2.0 3.0) 1)
(vector-ref #(:t 'a 2 3.0) 1)
(vector-to-list #(:fixnum 1 2 3))
(vector-type #(:t a b c))
(vectorp #(:char #\a #\a #\a))
(vectorp #(:fixnum 1 2 3))
(vectorp #(:float 1.0 2.0 3.0))
(vectorp #(:t 1 'a 3))
(vectorp :nil)
(write-char #\a standard-output)
:nil
:t
